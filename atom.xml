<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZBlog</title>
  <icon>https://tig.red/icon.png</icon>
  <subtitle>day day up</subtitle>
  <link href="https://tig.red/atom.xml" rel="self"/>
  
  <link href="https://tig.red/"/>
  <updated>2021-12-21T04:09:14.857Z</updated>
  <id>https://tig.red/</id>
  
  <author>
    <name>zhouxinghang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>log4j2 远程执行漏洞原理与复现</title>
    <link href="https://tig.red/log4j2-rce.html"/>
    <id>https://tig.red/log4j2-rce.html</id>
    <published>2021-12-10T04:05:42.000Z</published>
    <updated>2021-12-21T04:09:14.857Z</updated>
    
    
    <summary type="html">log4j2 爆发漏洞，该漏洞通过记录某个字符串导致远程执行代码。像Steam，Apple iCloud这样的云服务以及像Minecraft这样的应用程序已经被发现容易受到攻击</summary>
    
    
    
    
    <category term="log4j" scheme="https://tig.red/tags/log4j/"/>
    
    <category term="rce" scheme="https://tig.red/tags/rce/"/>
    
  </entry>
  
  <entry>
    <title>红白机游戏文件如何做到这么小</title>
    <link href="https://tig.red/why-NES-file-so-small.html"/>
    <id>https://tig.red/why-NES-file-so-small.html</id>
    <published>2021-11-27T02:38:54.000Z</published>
    <updated>2021-12-21T04:09:14.860Z</updated>
    
    
    <summary type="html">NES 俗称红白机，游戏文件非常小但内容丰富，了解该文件的实现原理</summary>
    
    
    
    <category term="问答" scheme="https://tig.red/categories/%E9%97%AE%E7%AD%94/"/>
    
    
    <category term="红白机" scheme="https://tig.red/tags/%E7%BA%A2%E7%99%BD%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>reactor 线程模型及在 netty 中的应用</title>
    <link href="https://tig.red/reactor-thread-model-and-its-application-in-netty.html"/>
    <id>https://tig.red/reactor-thread-model-and-its-application-in-netty.html</id>
    <published>2021-11-26T03:06:05.000Z</published>
    <updated>2021-12-21T04:09:14.859Z</updated>
    
    
    <summary type="html">reactor 是事件驱动模型，netty 基于 nio 的事件驱动线程模型，实现高并发。</summary>
    
    
    
    <category term="java进阶" scheme="https://tig.red/categories/java%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="reactor" scheme="https://tig.red/tags/reactor/"/>
    
    <category term="nio" scheme="https://tig.red/tags/nio/"/>
    
    <category term="netty" scheme="https://tig.red/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>Unix socket 与 TCP/IP socket 的区别</title>
    <link href="https://tig.red/unix-socket-and-tcp-ip-socket.html"/>
    <id>https://tig.red/unix-socket-and-tcp-ip-socket.html</id>
    <published>2021-11-25T02:50:33.000Z</published>
    <updated>2021-12-21T04:09:14.860Z</updated>
    
    
    <summary type="html">Unix socket 又叫 IPC（inter-process communication 进程间通信） socket，基于文件系统实现同一主机上的进程间通信。TCP/IP socket 基于网络系统实现进程间网络通信。socket 是 Berkeley Software Distribution (BSD) 定义的通信标准接口。</summary>
    
    
    
    <category term="计算机网络" scheme="https://tig.red/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="socket" scheme="https://tig.red/tags/socket/"/>
    
    <category term="tcp" scheme="https://tig.red/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>druid-vs-hive</title>
    <link href="https://tig.red/druid-vs-hive.html"/>
    <id>https://tig.red/druid-vs-hive.html</id>
    <published>2021-11-24T07:56:41.000Z</published>
    <updated>2021-12-21T04:09:14.852Z</updated>
    
    
    <summary type="html">介绍 druid hive 的使用场景，简述实现原理</summary>
    
    
    
    <category term="大数据" scheme="https://tig.red/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="druid" scheme="https://tig.red/tags/druid/"/>
    
    <category term="hive" scheme="https://tig.red/tags/hive/"/>
    
    <category term="大数据" scheme="https://tig.red/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>hexo5-next8 配置</title>
    <link href="https://tig.red/hexo5-next8.html"/>
    <id>https://tig.red/hexo5-next8.html</id>
    <published>2021-11-23T05:09:23.000Z</published>
    <updated>2021-12-21T04:09:14.854Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;## 安装 hexo，需要 nodejs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-cli -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo init blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 安装 next 主题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-theme-next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 初始化 next 配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## hexo5 推荐将主题配置文件放在根目录，命名为：_config.[name].yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 下面两种任选一种&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp node_modules/hexo-theme-next/_config.yml _config.next.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp themes/next/_config.yml _config.next.yml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="101" scheme="https://tig.red/categories/101/"/>
    
    
    <category term="hexo" scheme="https://tig.red/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>ddd-overview</title>
    <link href="https://tig.red/ddd-overview.html"/>
    <id>https://tig.red/ddd-overview.html</id>
    <published>2021-11-19T09:53:46.000Z</published>
    <updated>2021-12-21T04:09:14.850Z</updated>
    
    
    <summary type="html">阅读领域驱动设计书籍的个人总结</summary>
    
    
    
    <category term="读书笔记" scheme="https://tig.red/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="ddd" scheme="https://tig.red/tags/ddd/"/>
    
  </entry>
  
  <entry>
    <title>kafka实现原理</title>
    <link href="https://tig.red/kafka-overview.html"/>
    <id>https://tig.red/kafka-overview.html</id>
    <published>2019-08-25T11:09:45.000Z</published>
    <updated>2021-12-21T04:09:14.857Z</updated>
    
    
    <summary type="html">Kafka 是一个高性能消息队列，数据追加到 partion 中，保证写入的高性能和水平扩展。</summary>
    
    
    
    <category term="中间件" scheme="https://tig.red/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="kafka" scheme="https://tig.red/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Http 407 问题排查</title>
    <link href="https://tig.red/http-407-fix.html"/>
    <id>https://tig.red/http-407-fix.html</id>
    <published>2019-07-25T11:08:25.000Z</published>
    <updated>2021-12-21T04:09:14.855Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;最近接一个新的代理平台出现了大量 Http 请求 407 的错误，主要是 HttpClient 的“延迟认证”导致的，排查原因记录下&lt;/p&gt;
&lt;h2 id=&quot;basic-认证&quot;&gt;&lt;a href=&quot;#basic-认证&quot; class=&quot;headerlink&quot; title=&quot;basic 认证&quot;&gt;&lt;/a&gt;basic 认证&lt;/h2&gt;&lt;p&gt;实现简单，但如果是 http 请求的话，信息会泄露，存在安全风险&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/entry/5ac175baf265da239e4e3999&quot;&gt;https://juejin.im/entry/5ac175baf265da239e4e3999&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;认证流程&quot;&gt;&lt;a href=&quot;#认证流程&quot; class=&quot;headerlink&quot; title=&quot;认证流程&quot;&gt;&lt;/a&gt;认证流程&lt;/h2&gt;&lt;p&gt;client -&amp;gt; server：未携带认证信息&lt;br&gt;server -&amp;gt; client：返回407&lt;br&gt;client -&amp;gt; server：携带认证信息&lt;br&gt;server -&amp;gt; client：返回200&lt;/p&gt;
&lt;p&gt;注意这两步在代码层面是无感知的，只会收到最后的200。如果这个tcp连接已经建立，下次请求就会直接携带认证信息&lt;/p&gt;</summary>
    
    
    
    <category term="异常排查" scheme="https://tig.red/categories/%E5%BC%82%E5%B8%B8%E6%8E%92%E6%9F%A5/"/>
    
    
    <category term="Http" scheme="https://tig.red/tags/Http/"/>
    
    <category term="HttpClient" scheme="https://tig.red/tags/HttpClient/"/>
    
  </entry>
  
  <entry>
    <title>ReentrantLock 实现原理</title>
    <link href="https://tig.red/ReentrantLock.html"/>
    <id>https://tig.red/ReentrantLock.html</id>
    <published>2019-07-07T09:45:14.000Z</published>
    <updated>2021-12-21T04:09:14.849Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;Lock-简介&quot;&gt;&lt;a href=&quot;#Lock-简介&quot; class=&quot;headerlink&quot; title=&quot;Lock 简介&quot;&gt;&lt;/a&gt;Lock 简介&lt;/h2&gt;&lt;p&gt;Lock 是 JDK1.5 之后提供的接口，它提供了和 synchronized 类似的同步功能，比 synchronized 更为灵活，能弥补 synchronized 在一些业务场景中的短板。&lt;/p&gt;
&lt;h2 id=&quot;Lock-的实现&quot;&gt;&lt;a href=&quot;#Lock-的实现&quot; class=&quot;headerlink&quot; title=&quot;Lock 的实现&quot;&gt;&lt;/a&gt;Lock 的实现&lt;/h2&gt;&lt;h3 id=&quot;ReentrantLock&quot;&gt;&lt;a href=&quot;#ReentrantLock&quot; class=&quot;headerlink&quot; title=&quot;ReentrantLock&quot;&gt;&lt;/a&gt;ReentrantLock&lt;/h3&gt;&lt;p&gt;可重入，排他，公平/非公平&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;https://raw.githubusercontent.com/zhouxinghang/resources/master/ZBlog/drawio18.svg?sanitize=true&quot; alt=&quot;656edd2a54b6e7e2d12eee8b5acf364c.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://tig.red/categories/java/"/>
    
    
    <category term="源码" scheme="https://tig.red/tags/%E6%BA%90%E7%A0%81/"/>
    
    <category term="AQS" scheme="https://tig.red/tags/AQS/"/>
    
  </entry>
  
  <entry>
    <title>disrupt 实现原理</title>
    <link href="https://tig.red/disrupt.html"/>
    <id>https://tig.red/disrupt.html</id>
    <published>2019-06-23T13:59:08.000Z</published>
    <updated>2021-12-21T04:09:14.851Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;一、Disruptor-简介&quot;&gt;&lt;a href=&quot;#一、Disruptor-简介&quot; class=&quot;headerlink&quot; title=&quot;一、Disruptor 简介&quot;&gt;&lt;/a&gt;一、Disruptor 简介&lt;/h2&gt;&lt;p&gt;线程间通讯框架，实现多线程共享数据。是一个高性能无锁队列，由英国外汇交易公司 LMAX 开发。&lt;/p&gt;
&lt;p&gt;性能测试：&lt;a href=&quot;https://github.com/LMAX-Exchange/disruptor/wiki/Performance-Results&quot;&gt;https://github.com/LMAX-Exchange/disruptor/wiki/Performance-Results&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://tig.red/categories/java/"/>
    
    
    <category term="源码" scheme="https://tig.red/tags/%E6%BA%90%E7%A0%81/"/>
    
    <category term="disruptor" scheme="https://tig.red/tags/disruptor/"/>
    
  </entry>
  
  <entry>
    <title>caffeine 缓存实现原理</title>
    <link href="https://tig.red/caffeine.html"/>
    <id>https://tig.red/caffeine.html</id>
    <published>2019-05-12T13:04:31.000Z</published>
    <updated>2021-12-21T04:09:14.850Z</updated>
    
    
    <summary type="html">Caffeine Cache 是与 Guava Cache 功能类似的进程缓存，性能比 Guava Cache 更好。本文主要介绍 Caffeine Cache 的实现原理</summary>
    
    
    
    <category term="javaWeb" scheme="https://tig.red/categories/javaWeb/"/>
    
    
    <category term="caffeine" scheme="https://tig.red/tags/caffeine/"/>
    
    <category term="源码" scheme="https://tig.red/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>protobuf 安装使用</title>
    <link href="https://tig.red/protobuf-use.html"/>
    <id>https://tig.red/protobuf-use.html</id>
    <published>2019-04-30T13:40:30.000Z</published>
    <updated>2021-12-21T04:09:14.858Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;官网下载 &lt;a href=&quot;https://github.com/protocolbuffers/protobuf/releases&quot;&gt;https://github.com/protocolbuffers/protobuf/releases&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解压，cd 到目录下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;./configure&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;make&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;make check&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sudo make install&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;which protoc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;protoc –version&lt;/p&gt;</summary>
    
    
    
    <category term="java进阶" scheme="https://tig.red/categories/java%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="protobuf" scheme="https://tig.red/tags/protobuf/"/>
    
    <category term="proto" scheme="https://tig.red/tags/proto/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://tig.red/singleton.html"/>
    <id>https://tig.red/singleton.html</id>
    <published>2019-04-13T12:43:22.000Z</published>
    <updated>2021-12-21T04:09:14.859Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;饿汉式单例&quot;&gt;&lt;a href=&quot;#饿汉式单例&quot; class=&quot;headerlink&quot; title=&quot;饿汉式单例&quot;&gt;&lt;/a&gt;饿汉式单例&lt;/h2&gt;&lt;p&gt;类加载立即初始化，绝对线程安全，不存在访问安全问题。Spring IOC 容器 ApplicationContext 就是一个饿汉式单例。&lt;/p&gt;
&lt;p&gt;优点：没有任何加锁，执行效率高，用户体验好&lt;/p&gt;
&lt;p&gt;缺点：类加载就初始化，浪费空间&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://tig.red/categories/java/"/>
    
    
    <category term="源码" scheme="https://tig.red/tags/%E6%BA%90%E7%A0%81/"/>
    
    <category term="设计模式" scheme="https://tig.red/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Mac 实现 NTFS 格式硬盘读写</title>
    <link href="https://tig.red/mac-NTFS.html"/>
    <id>https://tig.red/mac-NTFS.html</id>
    <published>2019-04-13T11:32:59.000Z</published>
    <updated>2021-12-21T04:09:14.858Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;理论&lt;/h2&gt;&lt;p&gt;Mac本身是支持NTFS写入的，只是NTFS是微软开发，由于版权和一些技术细节原因，苹果不愿公开说自己支持NTFS写入，也是有自己以后可能不支持NTFS写入的考量&lt;/p&gt;</summary>
    
    
    
    <category term="101" scheme="https://tig.red/categories/101/"/>
    
    
    <category term="mac" scheme="https://tig.red/tags/mac/"/>
    
    <category term="ntfs" scheme="https://tig.red/tags/ntfs/"/>
    
  </entry>
  
  <entry>
    <title>docker基础</title>
    <link href="https://tig.red/docker-base.html"/>
    <id>https://tig.red/docker-base.html</id>
    <published>2019-04-09T12:59:33.000Z</published>
    <updated>2021-12-21T04:09:14.852Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;Docker-简介&quot;&gt;&lt;a href=&quot;#Docker-简介&quot; class=&quot;headerlink&quot; title=&quot;Docker 简介&quot;&gt;&lt;/a&gt;Docker 简介&lt;/h2&gt;&lt;h3 id=&quot;什么是-Docker&quot;&gt;&lt;a href=&quot;#什么是-Docker&quot; class=&quot;headerlink&quot; title=&quot;什么是 Docker&quot;&gt;&lt;/a&gt;什么是 Docker&lt;/h3&gt;&lt;p&gt;Docker 是 dotCloud 公司创立，go 语言编写，基于 Ubuntu 开发。基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于&lt;strong&gt;操作系统层面的虚拟化技术&lt;/strong&gt;。隔离的进程独立于宿主和隔离的其他进程，也其曾为容器。&lt;/p&gt;</summary>
    
    
    
    <category term="服务容器" scheme="https://tig.red/categories/%E6%9C%8D%E5%8A%A1%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="javaWeb" scheme="https://tig.red/tags/javaWeb/"/>
    
    <category term="docker" scheme="https://tig.red/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>jvm参数</title>
    <link href="https://tig.red/jvm-options.html"/>
    <id>https://tig.red/jvm-options.html</id>
    <published>2019-04-06T13:15:55.000Z</published>
    <updated>2021-12-21T04:09:14.856Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;X-与-XX-的区别&quot;&gt;&lt;a href=&quot;#X-与-XX-的区别&quot; class=&quot;headerlink&quot; title=&quot;-X 与 -XX 的区别&quot;&gt;&lt;/a&gt;-X 与 -XX 的区别&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Standard options&lt;/strong&gt; :Options that begin with - are Standard options are expected to be accepted by all JVM implementations and are stable between releases (though they can be deprecated).&lt;br&gt;&lt;strong&gt;Non-standard options&lt;/strong&gt; :Options that begin with -X are non-standard (not guaranteed to be supported on all JVM implementations), and are subject to change without notice in subsequent releases of the Java SDK.&lt;br&gt;&lt;strong&gt;Developer options&lt;/strong&gt; :Options that begin with -XX are developer options and often have specific system requirements for correct operation and may require privileged access to system configuration parameters; they are not recommended for casual use. These options are also subject to change without notice.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="java" scheme="https://tig.red/categories/java/"/>
    
    
    <category term="java" scheme="https://tig.red/tags/java/"/>
    
    <category term="jvm" scheme="https://tig.red/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>nginx实现原理</title>
    <link href="https://tig.red/nginx-implement.html"/>
    <id>https://tig.red/nginx-implement.html</id>
    <published>2019-03-30T12:37:47.000Z</published>
    <updated>2021-12-21T04:09:14.858Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;简单理解-Nginx&quot;&gt;&lt;a href=&quot;#简单理解-Nginx&quot; class=&quot;headerlink&quot; title=&quot;简单理解 Nginx&quot;&gt;&lt;/a&gt;简单理解 Nginx&lt;/h2&gt;&lt;p&gt;nginx 是静态 web 服务器，意思是 engine x。并发量高，性能优越&lt;/p&gt;</summary>
    
    
    
    <category term="服务容器" scheme="https://tig.red/categories/%E6%9C%8D%E5%8A%A1%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="nginx" scheme="https://tig.red/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLocal</title>
    <link href="https://tig.red/threadLocal.html"/>
    <id>https://tig.red/threadLocal.html</id>
    <published>2019-03-20T12:22:41.000Z</published>
    <updated>2021-12-21T04:09:14.860Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;总结 ThreadLocal 实现原理，缺点，InheritableThreadLocal 原理，ThreadLocalRandom 中如何应用 ThreadLocal，Spring Bean 中如何 应用 ThreadLocal&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://tig.red/categories/java/"/>
    
    
    <category term="源码" scheme="https://tig.red/tags/%E6%BA%90%E7%A0%81/"/>
    
    <category term="spring" scheme="https://tig.red/tags/spring/"/>
    
    <category term="threadlocal" scheme="https://tig.red/tags/threadlocal/"/>
    
  </entry>
  
  <entry>
    <title>java常量池</title>
    <link href="https://tig.red/java-constant-pool.html"/>
    <id>https://tig.red/java-constant-pool.html</id>
    <published>2019-03-13T11:46:20.000Z</published>
    <updated>2021-12-21T04:09:14.855Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;java 包括三种常量池，分别是 字符串常量池、Class 常量池（也叫常量池表）和运行时常量池。&lt;/p&gt;
&lt;h2 id=&quot;字符串常量池（String-Pool）&quot;&gt;&lt;a href=&quot;#字符串常量池（String-Pool）&quot; class=&quot;headerlink&quot; title=&quot;字符串常量池（String Pool）&quot;&gt;&lt;/a&gt;字符串常量池（String Pool）&lt;/h2&gt;&lt;p&gt;String Pool 是 JVM 实例全局共享的，而 Runtime Constant Pool 是每个类都有一个。&lt;/p&gt;
&lt;p&gt;JVM 用一个哈希表记录对常量池的引用。&lt;/p&gt;
&lt;p&gt;String Pool 在 JDK1.7 之前是存放在方法区中的，JDK1.7 移入到堆中。可以测试下往List中无限放入String，看jdk各个版本的异常信息。jdk6是PermGen Space内存溢出，jdk7和8都是Java heap space内存溢出。&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://tig.red/categories/java/"/>
    
    
    <category term="源码" scheme="https://tig.red/tags/%E6%BA%90%E7%A0%81/"/>
    
    <category term="jvm" scheme="https://tig.red/tags/jvm/"/>
    
  </entry>
  
</feed>
